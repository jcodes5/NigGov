generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model bookmarkednewsarticle {
  id              String      @id
  user_id         String
  news_article_id String
  createdAt       DateTime    @default(now())
  newsarticle     newsarticle @relation(fields: [news_article_id], references: [id])

  @@unique([user_id, news_article_id], map: "BookmarkedNewsArticle_user_id_news_article_id_key")
  @@index([news_article_id], map: "BookmarkedNewsArticle_news_article_id_fkey")
  @@map("bookmarkednewsarticle")
}

model bookmarkedproject {
  id         String   @id
  user_id    String
  project_id String
  createdAt  DateTime @default(now())

  @@unique([user_id, project_id], map: "BookmarkedProject_user_id_project_id_key")
}

model Feedback {
  id                String   @id
  project_id        String
  user_id           String?
  user_name         String
  comment           String   @db.Text
  rating            Int?
  sentiment_summary String?
  created_at        DateTime @default(now())

  project project @relation(fields: [project_id], references: [id])

  @@index([project_id], map: "Feedback_project_id_fkey")
  @@index([user_id], map: "Feedback_user_id_fkey")
}

model newsarticle {
  id            String                  @id
  slug          String                  @unique(map: "NewsArticle_slug_key")
  title         String
  summary       String                  @db.Text
  imageUrl      String?
  dataAiHint    String?
  category      String
  publishedDate DateTime
  content       String                  @db.Text
  createdAt     DateTime                @default(now())
  updatedAt     DateTime
  bookmarks     bookmarkednewsarticle[]
}

model newscomment {
  id              String   @id
  content         String   @db.Text
  user_id         String
  news_article_id String
  createdAt       DateTime @default(now())
  updatedAt       DateTime

  @@index([news_article_id], map: "NewsComment_news_article_id_fkey")
  @@index([user_id], map: "NewsComment_user_id_fkey")
}

model newslike {
  id              String   @id
  user_id         String
  news_article_id String
  createdAt       DateTime @default(now())

  @@unique([user_id, news_article_id], map: "NewsLike_user_id_news_article_id_key")
  @@index([news_article_id], map: "NewsLike_news_article_id_fkey")
}

model project {
  id                String       @id
  title             String       @unique(map: "Project_title_key")
  subtitle          String
  ministry_id       String
  state_id          String
  status            String       @default("Planned")
  start_date        DateTime
  expected_end_date DateTime?
  actual_end_date   DateTime?
  description       String       @db.Text
  images            String?      @db.LongText
  videos            String?      @db.LongText
  impact_stats      String?      @db.LongText
  budget            Decimal?     @db.Decimal(15, 2)
  expenditure       Decimal?     @db.Decimal(15, 2)
  created_at        DateTime     @default(now())
  last_updated_at   DateTime

  feedback_list     Feedback[]
  projecttags       projecttag[]
}

model projecttag {
  projectId String
  tagId     Int

  project project @relation(fields: [projectId], references: [id])
  tag     tag     @relation(fields: [tagId], references: [id])

  @@id([projectId, tagId])

}

model service {
  id         String   @id
  slug       String   @unique(map: "Service_slug_key")
  title      String
  summary    String   @db.Text
  iconName   String?
  link       String?
  category   String
  imageUrl   String?
  dataAiHint String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime

  @@index([userId], map: "Session_userId_fkey")
}

model sitesetting {
  id              String   @id @default("global_settings")
  siteName        String?
  maintenanceMode Boolean  @default(false)
  contactEmail    String?
  footerMessage   String?  @db.Text
  updatedAt       DateTime
}

model tag {
  id         Int          @id @default(autoincrement())
  name       String       @unique(map: "Tag_name_key")
  projecttag projecttag[]
}

model user {
  id            String    @id
  name          String?
  email         String?   @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  password      String?
  role          String?   @default("user")
  created_at    DateTime  @default(now())
  updated_at    DateTime
}

model verificationToken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

model video {
  id           String   @id
  title        String
  url          String
  thumbnailUrl String?
  dataAiHint   String?
  description  String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime
}

model passwordResetToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique(map: "PasswordResetToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "PasswordResetToken_identifier_token_key")
}
