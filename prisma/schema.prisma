// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User and Auth models (NextAuth.js)
model User {
  id                    String                    @id @default(cuid())
  name                  String?
  email                 String?                   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  String?                   @default("user") // 'user' or 'admin'
  created_at            DateTime                  @default(now())
  updated_at            DateTime                  @updatedAt
  accounts              Account[]
  sessions              Session[]
  feedback_list         Feedback[]
  bookmarked_projects   BookmarkedProject[]
  bookmarked_news       BookmarkedNewsArticle[]
  news_likes            NewsLike[]
  news_comments         NewsComment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// Application-specific models
model Project {
  id                String       @id @default(cuid())
  title             String       @unique
  subtitle          String
  ministry_id       String
  state_id          String
  status            String       @default("Planned") // e.g., Planned, Ongoing, Completed, On Hold
  start_date        DateTime
  expected_end_date DateTime?
  actual_end_date   DateTime?
  description       String       @db.Text
  images            Json?        // Store as JSON array of { url: string, alt: string }
  videos            Json?        // Store as JSON array of Video objects
  impact_stats      Json?        // Store as JSON array of ImpactStat objects
  budget            Decimal?     @db.Decimal(15, 2)
  expenditure       Decimal?     @db.Decimal(15, 2)
  created_at        DateTime     @default(now())
  last_updated_at   DateTime     @updatedAt
  tags              ProjectTag[] @relation("ProjectTags")
  feedback_list     Feedback[]   @relation("ProjectFeedback")
}

model Tag {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  projects ProjectTag[] @relation("ProjectTags")
}

model ProjectTag {
  projectId String
  tagId     Int
  project   Project @relation("ProjectTags", fields: [projectId], references: [id], onDelete: Cascade)
  tag       Tag     @relation("ProjectTags", fields: [tagId], references: [id], onDelete: Cascade)

  @@id([projectId, tagId])
}

model Feedback {
  id                String    @id @default(cuid())
  project_id        String
  user_id           String?
  user_name         String
  comment           String    @db.Text
  rating            Int?
  sentiment_summary String?
  created_at        DateTime  @default(now())
  project           Project   @relation("ProjectFeedback", fields: [project_id], references: [id], onDelete: Cascade)
  user              User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
}

model NewsArticle {
  id              String                  @id @default(cuid())
  slug            String                  @unique
  title           String
  summary         String                  @db.Text
  imageUrl        String?
  dataAiHint      String?
  category        String
  publishedDate   DateTime
  content         String                  @db.Text
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  bookmarks       BookmarkedNewsArticle[]
  likes           NewsLike[]
  comments        NewsComment[]
}

model BookmarkedNewsArticle {
  id              String      @id @default(cuid())
  user_id         String
  news_article_id String
  createdAt       DateTime    @default(now())
  user            User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  newsArticle     NewsArticle @relation(fields: [news_article_id], references: [id], onDelete: Cascade)

  @@unique([user_id, news_article_id])
}

model BookmarkedProject {
  id         String   @id @default(cuid())
  user_id    String
  project_id String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  // No relation back to Project needed, assuming it's a one-way bookmark

  @@unique([user_id, project_id])
}

model NewsLike {
    id String @id @default(cuid())
    user_id String
    news_article_id String
    createdAt DateTime @default(now())
    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
    newsArticle NewsArticle @relation(fields: [news_article_id], references: [id], onDelete: Cascade)

    @@unique([user_id, news_article_id])
}

model NewsComment {
    id String @id @default(cuid())
    content String @db.Text
    user_id String
    news_article_id String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
    newsArticle NewsArticle @relation(fields: [news_article_id], references: [id], onDelete: Cascade)
}

model Service {
  id         String   @id @default(cuid())
  slug       String   @unique
  title      String
  summary    String   @db.Text
  iconName   String?
  link       String?
  category   String
  imageUrl   String?
  dataAiHint String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Video {
  id           String   @id @default(cuid())
  title        String
  url          String
  thumbnailUrl String?
  dataAiHint   String?
  description  String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SiteSetting {
  id              String    @id @default("global_settings")
  siteName        String?
  maintenanceMode Boolean   @default(false)
  contactEmail    String?
  footerMessage   String?   @db.Text
  updatedAt       DateTime  @updatedAt
}
